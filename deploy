{
  "name": "retell-gcal-agent",
  "version": "1.0.0",
  "description": "Google Calendar integration for Retell AI voice agent",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "node test-connection.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "googleapis": "^128.0.0",
    "retell-sdk": "^4.0.0",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "keywords": [
    "retell",
    "google-calendar",
    "voice-ai",
    "webhook"
  ],
  "author": "",
  "license": "MIT"
}

// railway.json - Railway configuration (optional but helpful)
{
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "numReplicas": 1,
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}

// test-connection.js - Quick test script
const { google } = require('googleapis');
const fs = require('fs');
require('dotenv').config();

async function testConnection() {
  console.log('üîç Testing Google Calendar connection...\n');

  try {
    // Check for credentials
    if (!process.env.GOOGLE_SERVICE_ACCOUNT_PATH && !process.env.GOOGLE_SERVICE_ACCOUNT_KEY) {
      throw new Error('No service account credentials found in environment variables');
    }

    // Set up auth
    let auth;
    if (process.env.GOOGLE_SERVICE_ACCOUNT_PATH) {
      console.log('Using service account file:', process.env.GOOGLE_SERVICE_ACCOUNT_PATH);
      auth = new google.auth.GoogleAuth({
        keyFile: process.env.GOOGLE_SERVICE_ACCOUNT_PATH,
        scopes: ['https://www.googleapis.com/auth/calendar']
      });
    } else {
      console.log('Using service account from environment variable');
      const serviceAccount = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY);
      auth = new google.auth.GoogleAuth({
        credentials: serviceAccount,
        scopes: ['https://www.googleapis.com/auth/calendar']
      });
    }

    // Get calendar client
    const authClient = await auth.getClient();
    const calendar = google.calendar({ version: 'v3', auth: authClient });

    // List calendars
    console.log('üìÖ Fetching calendar list...\n');
    const calendarList = await calendar.calendarList.list();
    
    console.log('‚úÖ Successfully connected to Google Calendar!\n');
    console.log('Available calendars:');
    calendarList.data.items.forEach(cal => {
      console.log(`- ${cal.summary} (${cal.id})${cal.primary ? ' [PRIMARY]' : ''}`);
    });

    // Try to list today's events
    const now = new Date();
    const todayStart = new Date(now.setHours(0, 0, 0, 0));
    const todayEnd = new Date(now.setHours(23, 59, 59, 999));

    console.log('\nüìã Today\'s events:');
    const events = await calendar.events.list({
      calendarId: 'primary',
      timeMin: todayStart.toISOString(),
      timeMax: todayEnd.toISOString(),
      singleEvents: true,
      orderBy: 'startTime'
    });

    if (events.data.items.length === 0) {
      console.log('No events scheduled for today');
    } else {
      events.data.items.forEach(event => {
        const start = event.start.dateTime || event.start.date;
        console.log(`- ${new Date(start).toLocaleTimeString()}: ${event.summary}`);
      });
    }

    console.log('\n‚úÖ All tests passed! Your service account is properly configured.');
    console.log('\nNext steps:');
    console.log('1. Deploy to Railway');
    console.log('2. Configure Retell custom functions with your Railway URL');
    console.log('3. Test the voice agent!');

  } catch (error) {
    console.error('‚ùå Connection test failed!\n');
    console.error('Error:', error.message);
    
    if (error.message.includes('Permission denied')) {
      console.error('\nüí° Fix: Share your calendar with the service account email');
    } else if (error.message.includes('No such file')) {
      console.error('\nüí° Fix: Make sure service-account-key.json is in the project directory');
    } else if (error.code === 'ENOENT') {
      console.error('\nüí° Fix: Check that GOOGLE_SERVICE_ACCOUNT_PATH points to the correct file');
    }
    
    process.exit(1);
  }
}

// Run the test
testConnection();
